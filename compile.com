$ v = 'f$verify(0)
$!
$!  COMPILE.COM
$!
$!  Command procedure for compiling WATCHER
$!  sources.  Follow with use of LINK.COM to
$!  create the WATCHER executable.
$!
$!  Copyright (c) 2010, Matthew Madison.
$!
$!  All rights reserved.
$!
$!  Redistribution and use in source and binary forms, with or without
$!  modification, are permitted provided that the following conditions
$!  are met:
$!
$!      * Redistributions of source code must retain the above
$!        copyright notice, this list of conditions and the following
$!        disclaimer.
$!      * Redistributions in binary form must reproduce the above
$!        copyright notice, this list of conditions and the following
$!        disclaimer in the documentation and/or other materials provided
$!        with the distribution.
$!      * Neither the name of the copyright owner nor the names of any
$!        other contributors may be used to endorse or promote products
$!        derived from this software without specific prior written
$!        permission.
$!
$!  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
$!  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
$!  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
$!  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
$!  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
$!  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
$!  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
$!  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
$!  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
$!  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
$!  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
$!
$ olddef = F$ENVIRONMENT("DEFAULT")
$ ON := ON
$ IF := IF
$ THEN := THEN
$ ELSE := ELSE
$ GOTO := GOTO
$ LIBRARY := LIBRARY
$ MESSAGE := MESSAGE
$ SET := SET
$!
$ ON WARNING THEN GOTO bye
$ arch = F$EDIT (F$GETSYI("ARCH_NAME"),"TRIM,UPCASE")
$ IF arch .EQS. ""
$ THEN
$   WRITE SYS$OUTPUT "Cannot determine system architecture"
$   GOTO bye
$ ENDIF
$ BIN = "[-.BIN-''arch']"
$ IF arch .EQS. "ALPHA"
$ THEN
$   L32 = ".L32E"
$   BLISS := BLISS/NOLIST/CHECK=ALIGN
$ ENDIF
$ IF arch .EQS. "VAX"
$ THEN
$   L32 = ".L32"
$   BLISS := BLISS/NOLIST
$ ENDIF
$ IF arch .EQS. "IA64"
$ THEN
$   L32 = ".L32I"
$   BLISS := BLISS/NOLIST
$ ENDIF
$ DEFINE/NOLOG LIBREQ_DIR SYS$LIBRARY:
$ SET DEFAULT [.SOURCE]
$ IF F$PARSE(BIN) .EQS. "" THEN CREATE/DIR 'BIN'
$ LIBRARY/CREATE 'BIN'WATCHER.OLB
$ LIBRARY/CREATE 'BIN'WCP.OLB
$ SET VERIFY
$ BLISS/LIBR=FIELDS'L32' FIELDS.R32
$ BLISS/LIBR=WATCHER'L32' WATCHER.R32
$ BLISS/LIBR=WATCHER_PRIVATE'L32' WATCHER_PRIVATE.R32
$ BLISS/OBJECT='BIN'WATCHER.OBJ WATCHER.B32
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'WATCHER.OBJ
$ BLISS/OBJECT='BIN'COLLECT.OBJ COLLECT.B32
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'COLLECT.OBJ
$ BLISS/OBJECT='BIN'LOG.OBJ LOG.B32
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'LOG.OBJ
$ BLISS/OBJECT='BIN'FORCE.OBJ FORCE.B32
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'FORCE.OBJ
$ BLISS/LIBR=WCP'L32' WCP.R32
$ BLISS/OBJECT='BIN'CONFIG.OBJ CONFIG.B32
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'CONFIG.OBJ
$ BLISS/OBJECT='BIN'DECW_DISPLAY.OBJ DECW_DISPLAY.B32
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'DECW_DISPLAY.OBJ
$ BLISS/OBJECT='BIN'MEM.OBJ MEM.B32
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'MEM.OBJ
$ MESSAGE /OBJECT='BIN'WATCHER_MSG.OBJ WATCHER_MSG.MSG
$ LIBRARY/REPLACE 'BIN'WATCHER.OLB 'BIN'WATCHER_MSG.OBJ
$ BLISS/OBJECT='BIN'PERFORM_DISCONNECT.OBJ PERFORM_DISCONNECT.B32
$ BLISS/OBJECT='BIN'WCP.OBJ WCP.B32
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'WCP.OBJ
$ BLISS/OBJECT='BIN'WCP_SHOW.OBJ WCP_SHOW.B32
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'WCP_SHOW.OBJ
$ BLISS/OBJECT='BIN'WCP_MISC.OBJ WCP_MISC.B32
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'WCP_MISC.OBJ
$ BLISS/OBJECT='BIN'WCP_CMDIO.OBJ WCP_CMDIO.B32
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'WCP_CMDIO.OBJ
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'CONFIG.OBJ
$ BLISS/OBJECT='BIN'PARSE_TIMES.OBJ PARSE_TIMES.B32
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'PARSE_TIMES.OBJ
$ SET COMMAND/OBJECT='BIN'WCP_CLD.OBJ WCP_CLD.CLD
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'WCP_CLD.OBJ
$ SET COMMAND/OBJECT='BIN'WCP_CMD_CLD.OBJ WCP_CMD_CLD.CLD
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'WCP_CMD_CLD.OBJ
$ MESSAGE/OBJECT='BIN'WCP_MSG.OBJ WCP_MSG.MSG
$ LIBRARY/REPLACE 'BIN'WCP.OLB 'BIN'WCP_MSG.OBJ
$ BLISS/OBJECT='BIN'FORCE_EXIT.OBJ FORCE_EXIT.B32
$bye: !'f$verify(0)
$ EXIT := EXIT
$ SET DEFAULT 'olddef'
$ IF F$TRNLNM("LIBREQ_DIR","LNM$PROCESS") .NES. "" THEN DEASSIGN LIBREQ_DIR
$ EXIT 1+0*F$VERIFY(v)
